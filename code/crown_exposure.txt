-----------------------
## Author: Matteo Detto
## Sep 6, 2020
-----------------------
____
yes, I did that.

I did it in Matlab, as I started with a code I have already from a previous analysis (see te code at the bottom of the e-mail).
The code is very simple and it could be translated into R if necessary.

Description

For each census, focal individuals were selected with DBH > 100 mm and within a 15 m buffer zone from the edge of the plot.
A crown area was computed based on the site-specific allometry developed in Cano et al. (2019).
For each individual, the percentage of the exposed crown area was evaluated by computing the non-overlapping portion of the focal crown with the crowns of all individuals bigger than the focal and within a 15 m distance.

The method for computing the non-overlapping portion uses a Monte Carlo estimation. We randomly sample 100,000 points within the focal crown and compute the percentage of points that are not inside all the circles of the taller neighbors.

the code produces a CSV file for each census with the treeID, sp, DBH and rank of the focal individuals


Depending on how strict you want to be and how many trees you want to keep, you just chose a threshold for the rank. For example, with rank>80% you get roughly 2350 trees/census


Matteo
----

%% A Matlab code to compute the percentage of crown exposure (0-100) for individuals bigger than [tr] and within a [buffer] zone
clear

Lx=1000;Ly=500;
tr = 100; %size treshold (mm)
buffer=15;
range=15;

% random points within a unit circle
np=100000;
r = sqrt(rand(np,1));
theta = 2*pi*rand(np,1);
x = r.*cos(theta);
y = r.*sin(theta);


for i=1:8
    i
    dat = load(['...\Data\bci' num2str(i) '.mat']);

    % select focal individuals, exclude a buffer zone
    c1 = find(dat.dbh>tr & ...
              dat.gx>=buffer & dat.gx<=Lx-buffer & ...
              dat.gy>=buffer & dat.gy<=Ly-buffer);

    % select all individuals
    c2 = find(dat.dbh>tr);

    % get position and crown radius of focal individuals
    dbh = dat.dbh(c1)/10;
    gx = dat.gx(c1);
    gy = dat.gy(c1);
    crown = 0.66*dbh.^1.34;
    radius = sqrt(crown/pi);

    % get position and crown radius^2 of all individuals
    dbh2 = dat.dbh(c2)/10;
    gx2 = dat.gx(c2);
    gy2 = dat.gy(c2);
    crown2 = 0.66*dbh2.^1.34;
    radius2 = crown2/pi;

    % loop within focal individuals to estimate crown exposure
    rank=zeros(length(c1),1);
    parfor j=1:length(c1)

        % random points within focual crown
        xj = gx(j)+radius(j)*x;
        yj = gy(j)+radius(j)*y;

        usej = find(dbh2>=dbh(j)); % select individuals bigger or equal the focal

        dC2 = (gx2(usej)-gx(j)).^2 + (gy2(usej)-gy(j)).^2; %distance^2 to focal individual

        InTheRange = find(dC2>0&dC2<range^2); % select individuals in te range of the focal

        % loop through neighbors
        p = ones(np,1);
        for k=1:length(InTheRange)
            dr2 = (gx2(usej(InTheRange(k)))-xj).^2 + (gy2(usej(InTheRange(k)))-yj).^2;
            p(dr2<radius2(usej(InTheRange(k))))=0;
        end

        rank(j)=mean(p)*100;

%         viscircles([gx(j) gy(j)],radius(j));hold all;axis equal
%         viscircles([gx2(usej(InTheRange)) gy2(usej(InTheRange))],sqrt(radius2(usej(InTheRange))),'color','black')

    end

    tbl=table(dat.treeID(c1),dat.sp(c1),dat.dbh(c1),rank,'VariableNames',{'treeID','sp','dbh','rank'});
    writetable(tbl,['bci' num2str(h) '.csv'])

    sum(rank>80)
end
